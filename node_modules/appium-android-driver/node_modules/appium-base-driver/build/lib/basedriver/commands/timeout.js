'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var commands = {},
    helpers = {},
    extensions = {};

commands.timeouts = function callee$0$0(type, duration) {
  var ms;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ms = parseInt(duration, 10);
        context$1$0.t0 = type;
        context$1$0.next = context$1$0.t0 === 'command' ? 4 : context$1$0.t0 === 'implicit' ? 6 : 9;
        break;

      case 4:
        this.newCommandTimeout(ms);
        return context$1$0.abrupt('break', 10);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.implicitWait(ms));

      case 8:
        return context$1$0.abrupt('break', 10);

      case 9:
        throw new Error('Invalid timeout \'' + type + '\'');

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.implicitWait = function callee$0$0(ms) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.implicitWaitMs = parseInt(ms, 10);
        _logger2['default'].debug('Set implicit wait to ' + ms + 'ms');

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.newCommandTimeout = function (ms) {
  this.newCommandTimeoutMs = ms;
  _logger2['default'].debug('Set new command timeout to ' + ms + 'ms');
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  var _this = this;

  // make sure there are no rogue timeouts
  this.clearNewCommandTimeout();

  // if command timeout is 0, it is disabled
  if (!this.newCommandTimeoutMs) return;

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(function callee$1$0() {
    var errorMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _logger2['default'].warn('Shutting down because we waited ' + (this.newCommandTimeoutMs / 1000 + ' seconds for a command'));
          errorMessage = 'New Command Timeout of ' + (this.newCommandTimeoutMs / 1000 + ' seconds ') + 'expired. Try customizing the timeout using the ' + '\'newCommandTimeout\' desired capability';
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new Error(errorMessage)));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  })['catch'](_bluebird2['default'].CancellationError, function () /*err*/{
    // ignore
  });
};

helpers.implicitWaitForCondition = function callee$0$0(condFn) {
  var wrappedCondFn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Waiting up to ' + this.implicitWaitMs + ' ms for condition');

        wrappedCondFn = (function callee$1$0() {
          var args$2$0 = arguments;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                // reset command timeout
                this.clearNewCommandTimeout();

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(condFn.apply(undefined, args$2$0));

              case 3:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        }).bind(this);

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(wrappedCondFn, {
          waitMs: this.implicitWaitMs, intervalMs: 500, logger: _logger2['default']
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
// TODO: fix jshint and use an arrow function
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL3RpbWVvdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3NCQUFnQixXQUFXOzs7O3dCQUNNLFVBQVU7O3dCQUM3QixVQUFVOzs7OzZCQUNILGdCQUFnQjs7QUFHckMsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLFFBQVEsR0FBRyxvQkFBZ0IsSUFBSSxFQUFFLFFBQVE7TUFDNUMsRUFBRTs7OztBQUFGLFVBQUUsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQzt5QkFDeEIsSUFBSTs4Q0FDSixTQUFTLDBCQUdULFVBQVU7Ozs7QUFGYixZQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7O3lDQUdyQixJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQzs7Ozs7O2NBR3JCLElBQUksS0FBSyx3QkFBcUIsSUFBSSxRQUFJOzs7Ozs7O0NBRWpELENBQUM7O0FBRUYsUUFBUSxDQUFDLFlBQVksR0FBRyxvQkFBZ0IsRUFBRTs7OztBQUN4QyxZQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkMsNEJBQUksS0FBSywyQkFBeUIsRUFBRSxRQUFLLENBQUM7Ozs7Ozs7Q0FDM0MsQ0FBQzs7QUFFRixPQUFPLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxFQUFFLEVBQUU7QUFDeEMsTUFBSSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUM5QixzQkFBSSxLQUFLLGlDQUErQixFQUFFLFFBQUssQ0FBQztDQUNqRCxDQUFDOztBQUVGLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxZQUFZO0FBQzNDLE1BQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUN2QixRQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzdCLFFBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0dBQzVCO0NBQ0YsQ0FBQzs7QUFFRixPQUFPLENBQUMsc0JBQXNCLEdBQUcsWUFBWTs7OztBQUUzQyxNQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzs7O0FBRzlCLE1BQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsT0FBTzs7QUFFckMsTUFBSSxDQUFDLGNBQWMsR0FBRyxvQkFBSyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RSxNQUFJLENBQUMsY0FBYyxDQUNoQixJQUFJLENBQUM7UUFHQSxZQUFZOzs7O0FBRmhCLDhCQUFJLElBQUksQ0FBQyxzQ0FDRyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSw0QkFBd0IsQ0FBQyxDQUFDO0FBQ2pFLHNCQUFZLEdBQUcsNkJBQ1AsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksZUFBVyxvREFDSSw2Q0FDVDs7MkNBQzNDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7OztHQUM1RCxDQUFDLFNBQ0ksQ0FBQyxzQkFBRSxpQkFBaUIsRUFBRSxtQkFBYTs7R0FFeEMsQ0FBQyxDQUFDO0NBQ04sQ0FBQzs7QUFFRixPQUFPLENBQUMsd0JBQXdCLEdBQUcsb0JBQWdCLE1BQU07TUFFbkQsYUFBYTs7OztBQURqQiw0QkFBSSxLQUFLLG9CQUFrQixJQUFJLENBQUMsY0FBYyx1QkFBb0IsQ0FBQzs7QUFDL0QscUJBQWEsR0FBRyxDQUFBOzs7Ozs7QUFFbEIsb0JBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDOzs7aURBRWpCLE1BQU0sMkJBQVM7Ozs7Ozs7Ozs7VUFDN0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7eUNBQ0MsZ0NBQWlCLGFBQWEsRUFBRTtBQUMzQyxnQkFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLHFCQUFLO1NBQzFELENBQUM7Ozs7Ozs7Ozs7Q0FDSCxDQUFDOztBQUVGLGVBQWMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxRQUFRLEdBQVIsUUFBUTtRQUFFLE9BQU8sR0FBUCxPQUFPO3FCQUNYLFVBQVUiLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvdGltZW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMudGltZW91dHMgPSBhc3luYyBmdW5jdGlvbiAodHlwZSwgZHVyYXRpb24pIHtcbiAgbGV0IG1zID0gcGFyc2VJbnQoZHVyYXRpb24sIDEwKTtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlICdjb21tYW5kJzpcbiAgICAgIHRoaXMubmV3Q29tbWFuZFRpbWVvdXQobXMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1wbGljaXQnOlxuICAgICAgYXdhaXQgdGhpcy5pbXBsaWNpdFdhaXQobXMpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0aW1lb3V0ICcke3R5cGV9J2ApO1xuICB9XG59O1xuXG5jb21tYW5kcy5pbXBsaWNpdFdhaXQgPSBhc3luYyBmdW5jdGlvbiAobXMpIHtcbiAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIGxvZy5kZWJ1ZyhgU2V0IGltcGxpY2l0IHdhaXQgdG8gJHttc31tc2ApO1xufTtcblxuaGVscGVycy5uZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSBtcztcbiAgbG9nLmRlYnVnKGBTZXQgbmV3IGNvbW1hbmQgdGltZW91dCB0byAke21zfW1zYCk7XG59O1xuXG5oZWxwZXJzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm5vQ29tbWFuZFRpbWVyKSB7XG4gICAgdGhpcy5ub0NvbW1hbmRUaW1lci5jYW5jZWwoKTtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyID0gbnVsbDtcbiAgfVxufTtcblxuaGVscGVycy5zdGFydE5ld0NvbW1hbmRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHJvZ3VlIHRpbWVvdXRzXG4gIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuXG4gIC8vIGlmIGNvbW1hbmQgdGltZW91dCBpcyAwLCBpdCBpcyBkaXNhYmxlZFxuICBpZighdGhpcy5uZXdDb21tYW5kVGltZW91dE1zKSByZXR1cm47XG5cbiAgdGhpcy5ub0NvbW1hbmRUaW1lciA9IHV0aWwuY2FuY2VsbGFibGVEZWxheSh0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMpO1xuICB0aGlzLm5vQ29tbWFuZFRpbWVyXG4gICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgbG9nLndhcm4oYFNodXR0aW5nIGRvd24gYmVjYXVzZSB3ZSB3YWl0ZWQgYCArXG4gICAgICAgICAgICAgICBgJHt0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgLyAxMDAwfSBzZWNvbmRzIGZvciBhIGNvbW1hbmRgKTtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgTmV3IENvbW1hbmQgVGltZW91dCBvZiBgICtcbiAgICAgICAgICAgICAgIGAke3RoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyAvIDEwMDB9IHNlY29uZHMgYCArXG4gICAgICAgICAgICAgICBgZXhwaXJlZC4gVHJ5IGN1c3RvbWl6aW5nIHRoZSB0aW1lb3V0IHVzaW5nIHRoZSBgICtcbiAgICAgICAgICAgICAgIGAnbmV3Q29tbWFuZFRpbWVvdXQnIGRlc2lyZWQgY2FwYWJpbGl0eWA7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcbiAgICB9KVxuICAgIC5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoLyplcnIqLykgPT4ge1xuICAgICAgLy8gaWdub3JlXG4gICAgfSk7XG59O1xuXG5oZWxwZXJzLmltcGxpY2l0V2FpdEZvckNvbmRpdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChjb25kRm4pIHtcbiAgbG9nLmRlYnVnKGBXYWl0aW5nIHVwIHRvICR7dGhpcy5pbXBsaWNpdFdhaXRNc30gbXMgZm9yIGNvbmRpdGlvbmApO1xuICBsZXQgd3JhcHBlZENvbmRGbiA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgLy8gcmVzZXQgY29tbWFuZCB0aW1lb3V0XG4gICAgdGhpcy5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgY29uZEZuKC4uLmFyZ3MpO1xuICB9LmJpbmQodGhpcyk7IC8vIFRPRE86IGZpeCBqc2hpbnQgYW5kIHVzZSBhbiBhcnJvdyBmdW5jdGlvblxuICByZXR1cm4gYXdhaXQgd2FpdEZvckNvbmRpdGlvbih3cmFwcGVkQ29uZEZuLCB7XG4gICAgd2FpdE1zOiB0aGlzLmltcGxpY2l0V2FpdE1zLCBpbnRlcnZhbE1zOiA1MDAsIGxvZ2dlcjogbG9nXG4gIH0pO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdfQ==
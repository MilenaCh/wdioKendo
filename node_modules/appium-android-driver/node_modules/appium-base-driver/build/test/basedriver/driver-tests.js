'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

// wrap these tests in a function so we can export the tests and re-use them
// for actual driver implementations
function baseDriverUnitTests(DriverClass) {
  var _this = this;

  var defaultCaps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  describe('BaseDriver', function () {

    var d = undefined;
    beforeEach(function () {
      d = new DriverClass();
    });

    it('should return a sessionId from createSession', function callee$2$0() {
      var _ref, _ref2, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessId = _ref2[0];

            should.exist(sessId);
            sessId.should.be.a('string');
            sessId.length.should.be.above(5);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should not be able to start two sessions without closing the first', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps).should.eventually.be.rejectedWith('session'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be able to delete a session', function callee$2$0() {
      var sessionId1, sessionId2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            sessionId1 = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 5:
            should.equal(d.sessionId, null);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 8:
            sessionId2 = context$3$0.sent;

            sessionId1.should.not.eql(sessionId2);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should get the current session', function callee$2$0() {
      var _ref3, _ref32, caps;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref3 = context$3$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            caps = _ref32[1];
            context$3$0.t0 = caps.should;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.getSession());

          case 8:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.equal.call(context$3$0.t0, context$3$0.t1);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return sessions if no session exists', function callee$2$0() {
      var sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 2:
            sessions = context$3$0.sent;

            sessions.length.should.equal(0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return sessions', function callee$2$0() {
      var caps, sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _lodash2['default'].clone(defaultCaps);

            caps.a = 'cap';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 6:
            sessions = context$3$0.sent;

            sessions.length.should.equal(1);
            sessions[0].should.eql({
              id: d.sessionId,
              capabilities: caps
            });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should fulfill an unexpected driver quit promise', function callee$2$0() {
      var cmdPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.getStatus = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            cmdPromise = d.executeCommand('getStatus');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(0));

          case 4:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(cmdPromise.should.be.rejectedWith(/We crashed/));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should not allow commands in middle of unexpected shutdown', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should allow new commands after done shutting down', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

          case 12:
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(d.executeCommand('createSession', caps));

          case 14:
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should have a method to get driver for a session', function callee$2$0() {
      var _ref4, _ref42, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 1);
            sessId = _ref42[0];

            d.driverForSession(sessId).should.eql(d);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    describe('command queue', function () {
      var d = new DriverClass();

      var waitMs = 10;
      d.getStatus = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              return context$4$0.abrupt('return', Date.now());

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      }).bind(d);

      d.getSessions = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              throw new Error('multipass');

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      }).bind(d);

      afterEach(function () {
        d.clearNewCommandTimeout();
      });

      it('should queue commands and.executeCommand/respond in the order received', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < numCmds)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should handle errors correctly when queuing', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                if (i === 5) {
                  cmds.push(d.executeCommand('getSessions'));
                } else {
                  cmds.push(d.executeCommand('getStatus'));
                }
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].settle(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < 5)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
              results[5].reason().message.should.contain('multipass');
              i = 7;

            case 15:
              if (!(i < numCmds)) {
                context$4$0.next = 21;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 18;
                break;
              }

              throw new Error('Got result out of order');

            case 18:
              i++;
              context$4$0.next = 15;
              break;

            case 21:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not care if queue empties for a bit', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;

              cmds = [];
              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 10:
              results = context$4$0.sent;
              i = 1;

            case 12:
              if (!(i < numCmds)) {
                context$4$0.next = 18;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 15;
                break;
              }

              throw new Error('Got result out of order');

            case 15:
              i++;
              context$4$0.next = 12;
              break;

            case 18:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('timeouts', function () {
      var sessId = undefined;
      before(function callee$3$0() {
        var _ref5, _ref52;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
              _ref5 = context$4$0.sent;
              _ref52 = _slicedToArray(_ref5, 1);
              sessId = _ref52[0];

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      describe('command', function () {
        it('should exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.newCommandTimeoutMs.should.equal(60000);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('command', 20));

              case 2:
                d.newCommandTimeoutMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
      describe('implicit', function () {
        it('should not exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.implicitWaitMs.should.equal(0);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('implicit', 20));

              case 2:
                d.implicitWaitMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
    });

    describe('proxying', function () {
      var sessId = undefined;
      beforeEach(function callee$3$0() {
        var _ref6, _ref62;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
              _ref6 = context$4$0.sent;
              _ref62 = _slicedToArray(_ref6, 1);
              sessId = _ref62[0];

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      describe('#proxyActive', function () {
        it('should exist', function () {
          d.proxyActive.should.be.an['instanceof'](Function);
        });
        it('should return false', function () {
          d.proxyActive(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.proxyActive('aaa');
          }).should['throw'];
        });
      });

      describe('#getProxyAvoidList', function () {
        it('should exist', function () {
          d.getProxyAvoidList.should.be.an['instanceof'](Function);
        });
        it('should return an array', function () {
          d.getProxyAvoidList(sessId).should.be.an['instanceof'](Array);
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.getProxyAvoidList('aaa');
          }).should['throw'];
        });
      });

      describe('#canProxy', function () {
        it('should have a #canProxy method', function () {
          d.canProxy.should.be.an['instanceof'](Function);
        });
        it('should return false from #canProxy', function () {
          d.canProxy(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.canProxy();
          }).should['throw'];
        });
      });
    });
  });
}

exports['default'] = baseDriverUnitTests;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,